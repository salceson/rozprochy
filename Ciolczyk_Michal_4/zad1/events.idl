//Author: Michał Ciołczyk

module users {
	interface User;
};

module exceptions {
	exception DataUserPasswordAuthenticationException {
		string message;
	};

	exception UserAlreadyExistsException {
		string message;
	};

	exception NoSuchUserException {
		string message;
	};

	exception EndDateBeforeStartDateException {
		string message;
	};

	exception NoSuchEventException {
		string message;
	};

	exception JoinException {
		string message;
	};

	exception LeaveException {
		string message;
	};

	exception SubscribeException {
		string message;
	};

	exception UnsubscribeException {
		string message;
	};
};

module date {
	struct DateTime {
		short year;
		short month;
		short day;
		short hour;
		short minute;
	};
};

module events {
	struct EventData {
		date::DateTime startDate;
		date::DateTime endDate;
		string name;
		string place;
		short minParticipants;
		short maxParticipants;
	};

	typedef sequence<users::User> usersSeq;

	interface Event {
		attribute EventData eventData;
		usersSeq getParticipants();
		boolean canJoin();
	};

	module listeners {
		interface EventListener {
			void notifyUser(in EventData eventData, in string message);
		};
	};
};

module users {
	typedef sequence<events::Event> eventsSeq;

	interface User {
		attribute string username;
		attribute string password;
		attribute events::listeners::EventListener eventListener;
		eventsSeq getEvents();
	};

	interface UserManager {
		User login(in string username, in string password) raises (exceptions::DataUserPasswordAuthenticationException);
		void register(in string username, in string password) raises (exceptions::UserAlreadyExistsException);
	};
};

module events {
	interface EventManager {
		typedef sequence<Event> eventsSeq;

		Event create(in EventData eventData) raises (exceptions::EndDateBeforeStartDateException);
		
		eventsSeq findEventsByName(in string name);
		eventsSeq findEventsByPlace(in string place);
		eventsSeq findEventsByParticipantName(in string participantName);
		
		eventsSeq list();

		void join(in Event event, in users::User user) raises (exceptions::NoSuchEventException, exceptions::NoSuchUserException, exceptions::JoinException);
		void leave(in Event event, in users::User user) raises (exceptions::NoSuchEventException, exceptions::NoSuchUserException, exceptions::LeaveException);

		void subscribe(in Event event, in users::User user) raises (exceptions::NoSuchEventException, exceptions::NoSuchUserException, exceptions::SubscribeException);
		void unsubscribe(in Event event, in users::User user) raises (exceptions::NoSuchEventException, exceptions::NoSuchUserException, exceptions::UnsubscribeException);
	};

	module classevents {
		struct Teacher {
			string firstName;
			string lastName;
			string title;
			short age;
		};

		interface ClassEvent : events::Event {
 			attribute Teacher teacher;
 			attribute string subject;
			attribute short semester;
 		};
	};
};
		
